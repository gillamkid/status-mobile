// Top-level build file where you can add configuration options common to all sub-projects/modules.

/**
* Project-wide gradle configuration properties for use by all modules
*/
ext {
    // kotlin_version is needed for react-native-camera-kit library
    kotlin_version      = project.kotlinPluginVersion
    RNNKotlinVersion    = project.kotlinPluginVersion
    RNGH_kotlinVersion  = project.kotlinPluginVersion
    buildToolsVersion   = project.buildToolsVersion
    minSdkVersion       = Integer.valueOf(project.minSdkVersion)
    compileSdkVersion   = Integer.valueOf(project.compileSdkVersion)
    targetSdkVersion    = Integer.valueOf(project.targetSdkVersion)
    supportLibVersion   = project.supportLibVersion
    gradlePluginVersion = project.gradlePluginVersion
    kotlinVersion       = project.kotlinPluginVersion
    ndkVersion = "25.2.9519653"
}

buildscript {
    repositories {
        flatDir { dirs "libs", "${rootDir}/app/libs" }
        google()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.ext.kotlinPluginVersion}"
        classpath("com.android.tools.build:gradle")
        classpath("com.facebook.react:react-native-gradle-plugin")
    }
}

subprojects {
    afterEvaluate {
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion

                defaultConfig {
                    targetSdkVersion rootProject.ext.targetSdkVersion
                }
            }
        }
    }
}

task printUniquePluginsAndDependencies {
    doLast {
       def allItems = []
       // Kotlin plugin version check
       if (project.hasProperty('kotlinPluginVersion')) {
           def kotlinVersion = project.kotlinPluginVersion
           // since we are not using the plugins DSL we have to manually add this here
           allItems.add("org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:$kotlinVersion")
       }

       allprojects { project ->
           // Collect plugins
           project.plugins.each { plugin ->
               allItems.add(plugin.getClass().getName())
           }

           // Collect artifacts from the buildscript classpath
           project.buildscript.configurations.classpath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
               allItems.add("${artifact.moduleVersion.id.group}:${artifact.name}:${artifact.moduleVersion.id.version}")
           }

           // Collect dependencies from all configurations, excluding 'test' configurations
           project.configurations.each { config ->
               if (!config.name.toLowerCase().startsWith('test')) {
                   try {
                       config.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                           allItems.add("${artifact.moduleVersion.id.group}:${artifact.name}:${artifact.moduleVersion.id.version}")
                       }
                   } catch (Exception e) {
                       // Handle the case where a configuration is not resolvable
                   }
               }
           }
       }

        // Filter out specific dependencies and invalid entries
        def filteredItems = allItems.findAll { item ->
             !item.startsWith("StatusIm:") && // to strip out status-im:status-go:ea3e59f
             !item.startsWith("status-im:") && // to strip out StatusIm:react-native-touch-id:unspecified
             !item.contains("null") && // to strip out com.facebook.react:react-android:null
             !item.contains("unspecified") && // to strip out com.facebook.react:react-native-gradle-plugin:unspecified
             !item.endsWith("Inject") &&  // to strip out org.gradle.api.plugins.BasePlugin$Inject
             !item.endsWith("ReactPlugin") &&  // to strip out com.facebook.react.ReactPlugin
             !item.endsWith("DownloadTaskPlugin") &&  // to strip out de.undercouch.gradle.tasks.download.DownloadTaskPlugin
             !item.endsWith("KotlinAndroidPluginWrapper") &&  // to strip out org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper
             !item.contains("com.android.build.gradle.") // to strip out com.android.build.gradle.AppPlugin
        }

        // Remove duplicates & sort
        filteredItems.unique().sort().each {
            println it
        }
    }
}

allprojects {
    beforeEvaluate {
        if (System.env.STATUS_GO_ANDROID_LIBDIR == null || System.env.STATUS_GO_ANDROID_LIBDIR == "") {
            throw new GradleException('STATUS_GO_ANDROID_LIBDIR environment variable is not valid!')
        }
    }
    repositories {
        mavenLocal()
        // Android JSC is installed from npm
        maven { url("$rootDir/../node_modules/jsc-android/dist") }
        // For geth, function, and status-go
        flatDir { dirs "libs", System.env.STATUS_GO_ANDROID_LIBDIR }
        google()
        mavenCentral()
        maven { url 'https://mvnrepository.com/artifact/com.github.gundy/semver4j'}
    }
}

allprojects {
    apply plugin: 'project-report'

    task('allDependencies', type: org.gradle.api.tasks.diagnostics.DependencyReportTask) {
        // Depend on the evaluation of child projects to ensure all configurations are available
        evaluationDependsOnChildren()
    }
}
